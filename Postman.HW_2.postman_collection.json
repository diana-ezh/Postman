{
	"info": {
		"_postman_id": "a38844c8-667d-45d7-a67b-58db2796a859",
		"name": "Postman.HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19566823"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"//Проверить, что name в ответе равно name request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Diana\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"27\");\r",
							"    });\r",
							"//Проверить, что salary в ответе равно salary request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(3000);\r",
							"    });\r",
							"//Спарсить request.\r",
							"let req = request.data;\r",
							"//Проверить, что name в ответе равно name in request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age in request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary in request (salary забрать из request.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Your test u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Diana",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"//Спарсить request.\r",
							"let req = request.data;\r",
							"//Проверить, что name в ответе равно name in request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age in request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary in request (salary забрать из request.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"parameter dog have name\", () => {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"parameter dog have age\", () => {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"parameter name have Luky\", () => {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.to.be.oneOf([\"Luky\"])\r",
							"})\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"parameter age have 4.\", () => {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4])\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Diana",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Diana&salary=3000&age=27",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Diana"
						},
						{
							"key": "salary",
							"value": "3000"
						},
						{
							"key": "age",
							"value": "27"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"//Спарсить request.\r",
							"let req = request.data;\r",
							"//Проверить, что name в ответе равно name in request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age in request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salary_1 = jsonData.salary[0]\r",
							"console.log(salary_1)\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_2 = jsonData.salary[1]\r",
							"console.log(salary_2)\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_3 = jsonData.salary[2]\r",
							"console.log(salary_3)\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary 0\", function () {\r",
							"pm.expect(salary_1).to.eql(+req.salary);\r",
							"})\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 1\", function () {\r",
							"pm.expect(+salary_2).to.eql(req.salary*2);\r",
							"})\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 2\", function () {\r",
							"pm.expect(+salary_3).to.eql(req.salary*3);\r",
							"})\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set('name', jsonData.name);\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set('age', jsonData.age);\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set('salary', jsonData.salary);\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i < jsonData.salary.length; i++){\r",
							"console.log(\"salary cycle\", jsonData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Diana",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Diana&salary=3000&age=27",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Diana"
						},
						{
							"key": "salary",
							"value": "3000"
						},
						{
							"key": "age",
							"value": "27"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"//Спарсить request.\r",
							"let req = request.data;\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response have start_qa_salary\"), () => {\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"}\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response have qa_salary_after_6_months\"), () => {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"}\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response have qa_salary_after_12_months\"), () => {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"}\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response have qa_salary_after_1.5_year\"), () => {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"}\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response have qa_salary_after_3.5_year\"), () => {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_year\")\r",
							"}\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response have person\", () => {\r",
							"pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_6_months\"]).to.eql(req.salary*2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_12_months\"]).to.eql(req.salary*2.7);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary из request\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_year равен salary из request\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_year\"]).to.eql(req.salary*3.8)\r",
							"})\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"in person, 1-й element from u_name eql salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(req.salary))\r",
							"});\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age eql age from request\", function(){\r",
							"pm.expect(jsonData.person.u_age).to.eql(+req.age)\r",
							"}); \r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years eql age from request\", function(){\r",
							"pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}